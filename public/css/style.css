* {
   box-sizing: border-box;
 }
ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}
body {
  font-family: Verdana, sans-serif;
  background-color: #fcf6bc;
  text-align: center;
  margin: 0px 100px;
}

.month {
  padding: 20px;
  margin-top: 100px;
  background: #dcacf8;
  color: white;
}

.month ul {
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.month ul li {
  font-size: 18px;
  font-weight: bold;
}

.weekdays,
.days {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  background: #fcf6bc;
  padding: 10px 0;
}

.weekdays li,
.days li {
  width: calc(100% / 7);
  text-align: center;
  margin-bottom: 5px;
}

.days li {
  height: 60px;
  background: white;
  line-height: 60px;
  position: relative;
  border: solid black;
  cursor: pointer;
}

.days li:hover {
  background: #dcacf8;
}

.days li .active {
  background: #1abc9c;
  color: white;
  border-radius: 50%;
  padding: 10px;
}

.event {
  font-size: 12px;
  background: #dcacf8;
  border: solid black;
  color: white;
  padding: 2px 5px;
  border-radius: 3px;
  position: absolute;
  bottom: 5px;
  left: 5px;
}

/* Modal styling */
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  justify-content: center;
  align-items: center;
}

.modal-content {
  background: white;
  padding: 20px;
  border-radius: 5px;
  width: 300px;
}

.modal-content input,
.modal-content textarea {
  width: 100%;
  margin: 10px 0;
  padding: 5px;
}

.modal-content button {
  background: #dcacf8;
  color: white;
  padding: 10px;
  border: none;
  cursor: pointer;
}

.modal-content button:hover {
  background: #dcacf8;
}

.neuerBeitrag {
  display: flex;
  flex-direction: row;
  background-color: #fff;
  border: solid black;
  border-radius: 15px;
  align-items: center;
  margin-top: 100px;
}
.neuerBeitrag img {
  width: 30%;
  height: auto;
  padding: 5px;
}

.text {
  text-align: left;
  padding: 20px 0px;
}

.text button {
  display: flex;
  flex-direction: row;
  align-items: center;
}

header {
  background: #fcf6bc;
  color: #242121;
  padding: 1rem;
  display: flex;
  justify-content: right;
  align-items: center;
  border-bottom: solid #242121;
  padding-right: 50px;
}

header ul,
footer ul {
  list-style: none;
  display: flex;
  gap: 1rem;
}

header ul a,
footer ul a {
  color: #242121;
  text-decoration: none;
}
</style>
</head>
<header>
<nav>
<a href="index.html" class="logo">Logo</a>
<ul>
<li><a href="index.html">Home</a></li>
<li><a href="kalender.html">Reflexion</a></li>
<li><a href="konto.html">Konto</a></li>
<li><a href="login.html" class="login-btn">Login</a></li>
</ul>
</nav>
</header>
<body>
<div class="neuerBeitrag">
<img src="assets/kalernderUebersicht1.png" alt="" />
<div class="text">
<h2>Kalender Übersicht</h2>
<p>
 Lorem ipsum dolor sit amet consectetur adipisicing elit. Velit in
 deserunt excepturi ipsum ipsa illum corporis minima explicabo commodi
 dolore? Aperiam velit adipisci recusandae, voluptatibus tenetur
quisquam illo eaque at.
</p>
<button><img src="assets/plus-circle.svg" alt="" />Beitrag</button>
</div>
</div>

<div class="month">
<ul>
<li class="prev" id="prevMonth">&#10094;</li>
<li id="monthYear">August 2021</li>
<li class="next" id="nextMonth">&#10095;</li>
</ul>
</div>

<ul class="weekdays">
<li>Mo</li>
<li>Di</li>
<li>Mi</li>
<li>Do</li>
<li>Fr</li>
<li>Sa</li>
<li>So</li>
</ul>

<ul class="days" id="calendarDays">
<!-- Days will be dynamically generated -->
</ul>

<div class="modal" id="eventModal">
<div class="modal-content">
<h3>Event hinzufügen</h3>
<input type="text" id="eventTitle" placeholder="Event Titel" />
<button id="saveEvent">Speichern</button>
</div>
</div>

<script>
 const calendarDays = document.getElementById("calendarDays");
const monthYear = document.getElementById("monthYear");
const prevMonth = document.getElementById("prevMonth");
const nextMonth = document.getElementById("nextMonth");
const eventModal = document.getElementById("eventModal");
const eventTitle = document.getElementById("eventTitle");
const saveEvent = document.getElementById("saveEvent");

let currentMonth = new Date().getMonth();
let currentYear = new Date().getFullYear();
const events = {};

function renderCalendar(month, year) {
calendarDays.innerHTML = "";
  const firstDay = new Date(year, month).getDay();
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  const prevDays = (firstDay + 6) % 7;

monthYear.textContent = `${new Date(year, month).toLocaleString(
          "de-DE",
          { month: "long" }
)} ${year}`;

// Render previous month's filler days
for (let i = 0; i < prevDays; i++) {
  const li = document.createElement("li");
li.style.visibility = "hidden";
calendarDays.appendChild(li);
}

// Render current month's days
for (let day = 1; day <= daysInMonth; day++) {
  const li = document.createElement("li");
li.textContent = day;
li.addEventListener("click", () => openModal(day, month, year));

  const eventKey = `${year}-${String(month + 1).padStart(
            2,
            "0"
          )}-${String(day).padStart(2, "0")}`;
  if (events[eventKey]) {
events[eventKey].forEach((event) => {
  const eventDiv = document.createElement("div");
eventDiv.className = "event";
eventDiv.textContent = event;
li.appendChild(eventDiv);
});
}

calendarDays.appendChild(li);
}
}

function openModal(day, month, year) {
  const selectedDate = `${year}-${String(month + 1).padStart(
          2,
          "0"
        )}-${String(day).padStart(2, "0")}`;
eventModal.style.display = "flex";
saveEvent.onclick = () => {
  const title = eventTitle.value.trim();
  if (title) {
  if (!events[selectedDate]) {
events[selectedDate] = [];
}
events[selectedDate].push(title);
renderCalendar(currentMonth, currentYear);
eventModal.style.display = "none";
eventTitle.value = "";
} else {
  alert("Bitte einen Event Titel eingeben!");
  }
};
}

prevMonth.addEventListener("click", () => {
                                          currentMonth--;
                                          if (currentMonth < 0) {
                                          currentMonth = 11;
                                          currentYear--;
                                        }
                                        renderCalendar(currentMonth, currentYear);
                                        });

nextMonth.addEventListener("click", () => {
                                          currentMonth++;
                                          if (currentMonth > 11) {
                                          currentMonth = 0;
                                          currentYear++;
                                        }
                                        renderCalendar(currentMonth, currentYear);
                                        });

eventModal.addEventListener("click", (e) => {
                                            if (e.target === eventModal) {
                                            eventModal.style.display = "none";
                                          }
                                          });

renderCalendar(currentMonth, currentYear);
</script>
</body>
</html>
